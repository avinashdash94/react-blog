const mongoose = require('mongoose'); 
const bcrypt = require('bcrypt');// used for encrypt the password
// const e = require('express');
var jwt = require('jsonwebtoken');

const saltRounds = 10;

const userSchema = mongoose.Schema({
    name:{
        type: String,
        maxlength: 50 
    },
    email:{
        type:String,
        trim: true,
        unique: 1
    },
    password:{
        type: String,
        minlength: 5
    },
    lastname:{
        type: String,
        maxlength: 50 
    },
    role:{
        type: Number,
        default: 0 
    },
    token:{
        type: String,
    },
    tokenExp:{
        type: Number
    },
})

//pre means before save do the encryption of password
userSchema.pre('save', function(next){
    var user = this; //here this indicates the userSchema

    //this function will take the user passwor and hash it and then we assign that hash value to the pwd
    if (user.isModified('password')) {
        //saltRounds: define above which means 10 charactor
        bcrypt.genSalt(saltRounds, function (err, salt) {
            if (err) return next(err);

            bcrypt.hash(user.password, salt, function (err, hash) {
                if (err) return next(err);
                user.password = hash;
                // Store hash in your password DB.
                next();
            });

        })
    }
    else {
        next()
    }
});

//The following function is used to compare the password
userSchema.methods.comparePassword = function(plainPassword, cb){ //cb: call back function
    bcrypt.compare(plainPassword, this.password, function(err, isMatch){//here we compair the plainPassword(which user entered) pwd with Db Pwd ie:this.password 
        if(err) return cb(err);
        cb(null, isMatch)
    }); 
}

//following method is used to generate the token for the loged in user
userSchema.methods.generateToken = function(cb){ //cb: callback function
    var user = this; //here this indicates the userSchema
    
    //To create token we use user_id generated by mongoDB and Hash it the add the Privet key for use it is 'secret'
    var token = jwt.sign(user._id.toHexString(),'secret'); 

    //Here we assing the generated token to the user token in Db
    user.token = token;

    user.save(function(err, user){
        if(err) return cb(err);
        cb(null, user)  //if no error then return the user
    })
}

//Following method is used to check user is authenticated or not
userSchema.statics.findByToken = function(token, cb){
    var user = this;

    jwt.verify(token, 'secret', function(err, decode) { //first we decode the token which is encoded by using _id of mongo db
        user.findOne({"_id": decode, "token": token}, function(err, user){ // now as token is decoded that means it become again _id so we find user with _id and token
            if(err) return cb(err);

            cb(null, user);
        });

    });
    
}


const User = mongoose.model('User', userSchema);

module.exports = {User}